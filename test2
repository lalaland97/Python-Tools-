import re
import sqlite3

def remove_comments(sql_script):
    sql_script = re.sub(r'--.*', '', sql_script)
    sql_script = re.sub(r'/\*.*?\*/', '', sql_script, flags=re.DOTALL)
    return sql_script

def extract_tables(sql_script):
    sql_script = remove_comments(sql_script)

    dest_patterns = [
        re.compile(r'CREATE\s+(MULTISET\s+|SET\s+)?TABLE\s+(\w+\.\w+)', re.IGNORECASE),
        re.compile(r'INSERT\s+INTO\s+(\w+\.\w+)', re.IGNORECASE),
        re.compile(r'MERGE\s+INTO\s+(\w+\.\w+)', re.IGNORECASE),
        re.compile(r'UPDATE\s+(\w+\.\w+)', re.IGNORECASE),
        re.compile(r'DELETE\s+FROM\s+(\w+\.\w+)', re.IGNORECASE)
    ]

    src_patterns = [
        re.compile(r'FROM\s+(\w+\.\w+)', re.IGNORECASE),
        re.compile(r'JOIN\s+(\w+\.\w+)', re.IGNORECASE),
        re.compile(r'USING\s+(\w+\.\w+)', re.IGNORECASE)
    ]

    source_tables = set()
    destination_tables = set()

    # Extract destination tables
    for pattern in dest_patterns:
        matches = pattern.findall(sql_script)
        for match in matches:
            table_name = match[-1]
            destination_tables.add(table_name)

    # Extract source tables
    for pattern in src_patterns:
        matches = pattern.findall(sql_script)
        for match in matches:
            table_name = match[-1]
            source_tables.add(table_name)

    source_tables = {table for table in source_tables if '.' in table}
    destination_tables = {table for table in destination_tables if '.' in table}

    return list(source_tables), list(destination_tables)

def populate_sql_table(db_path, script_name, source_tables, destination_tables):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS script_info (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        script_name TEXT,
        source_table TEXT,
        destination_table TEXT
    )
    ''')
    
    for table in source_tables:
        cursor.execute('''
        INSERT INTO script_info (script_name, source_table, destination_table)
        VALUES (?, ?, ?)
        ''', (script_name, table, None))
    
    for table in destination_tables:
        cursor.execute('''
        INSERT INTO script_info (script_name, source_table, destination_table)
        VALUES (?, ?, ?)
        ''', (script_name, None, table))
    
    conn.commit()
    conn.close()

# Main function
def main():
    db_path = 'example.db'
    script_name = 'example_script.sql'
    sql_script = """
    -- Sample SQL script
    CREATE TABLE db1.table1 (id INT);
    INSERT INTO db1.table1 (id) VALUES (1);
    SELECT * FROM db2.table2;
    """
    
    source_tables, destination_tables = extract_tables(sql_script)
    populate_sql_table(db_path, script_name, source_tables, destination_tables)

if __name__ == "__main__":
    main()
